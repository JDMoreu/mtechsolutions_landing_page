---

const navItems = [
  {
    title:"Inicio",
    label:"inicio",
    url: "/#inicio",
  },
  {
	title:"Servicios",
	label:"servicios",
	url:"/#servicios"
  },
  {
	title:"Nosotros",
	label:"nosotros",
	url:"/#nosotros"
  },
  {
	title:"Contacto",
	label:"contacto",
	url:"/#contacto"
  }
]

---

<header class="sticky top-0 right-0 z-10 bg-white border-gray-200 border-b-1 dark:bg-gray-900 dark:border-gray-700">

	<nav class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">

			<a href="/#inicio" class="flex items-center space-x-3 rtl:space-x-reverse">
				<img src="/logo.svg" class="h-10" alt="mtechsolutions logo" />
				<span class="self-center text-2xl font-semibold whitespace-nowrap dark:text-white">mtechsolutions</span>
			</a>
			<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
	
				<button onclick="(() => document.documentElement.classList.toggle('dark'))()"
					class="h-12 w-12 rounded-xl p-2 hover:bg-gray-100 dark:hover:bg-gray-700">
					<svg class="fill-gray-700 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
						<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
					</svg>
					<svg class="fill-gray-100 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
						<path
							d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
							fill-rule="evenodd" clip-rule="evenodd"></path>
					</svg>
				</button>
	
			<button data-collapse-toggle="navbar-cta" type="button" 
				class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2
				 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-cta" aria-expanded="false">
				  <span class="sr-only">Abrir men√∫</span>
				  <svg class="w-5 h-5" aria-hidden="true" fill="none" viewBox="0 0 17 14">
					  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
				  </svg>
			  </button>
	
			</div>
	
			<div class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1" id="navbar-cta">
			  <li class="flex flex-col font-medium p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
				{
					navItems.map((item) => (
						
							<a href={item.url} class="block py-2 px-3 md:p-0 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700"  
							aria-label={item.label}>{item.title}</a>
						
					))
				}
			  </li>
			</div>
	  </nav>
	  

</header>

<script>

	const textStatus ={
		"litght":"text-gray-900",
		"dark":"dark:text-white",
		"active":"text-blue-600"
	}
	

	document.addEventListener("astro:page-load", () => {
	  const sections = document.querySelectorAll("section");
	  const navLinks = document.querySelectorAll("header nav li a");
  
	  const callback = (entries: any[]) => {
		entries.forEach((entry) => {
		  if (entry.isIntersecting) {
			navLinks.forEach((link) => {
			  if (link.getAttribute("aria-label") === entry.target.id) {
				link.classList.remove(textStatus.dark);
				link.classList.remove(textStatus.litght);
				link.classList.add(textStatus.active);
			  } else {
				link.classList.remove(textStatus.active);
				link.classList.add(textStatus.dark);
				link.classList.add(textStatus.litght);
			  }
			});
		  }
		});
	  };
  
	  const observer = new IntersectionObserver(callback, {
		root: null,
		rootMargin: "0px",
		threshold: 0.3,
	  });
  
	  sections.forEach((section) => {
		observer.observe(section);
	  });
  
	  document.onvisibilitychange = () => {
		if (document.visibilityState === "hidden") {
		  observer.disconnect();
		} else {
		  sections.forEach((section) => {
			observer.observe(section);
		  });
		}
	  };
	});
  </script>